version: '3.4'



networks:
  backend:
    
services:
  customerdb:
     container_name: customer-db
     image: mcr.microsoft.com/mssql/server:2019-latest
     ports:
       - 18001:1433
     environment:
       - ACCEPT_EULA=Y
       - MSSQL_SA_PASSWORD=Password1@123
     networks:
       - backend

  customerwebapi:
    container_name: customer-api
    image: ${DOCKER_REGISTRY-}customerwebapi
    build:
      context: .
      dockerfile: CustomerWebApi/Dockerfile
    networks:
       - backend
    #ports:
      # - 18002:80   #we are taking the port mappings cos we are now using the ocelot  api gateway.
    environment:
      - DB_HOST=customerdb             
      - DB_NAME=dms_customer    
      - DB_MSSQL_SA_PASSWORD=Password1@123

  productdb:
     container_name: product-db
     image: mysql:8.0.33-oracle
     environment:
      - MYSQL_ROOT_PASSWORD=Password1@123
     ports:
      - 18003:3306
     networks:
      - backend

  productwebapi:
    container_name: product-api
    image: ${DOCKER_REGISTRY-}productwebapi
    build:
      context: .
      dockerfile: ProductWebApi/Dockerfile
    networks:
      - backend
   # ports:
     #- 18004:80    #we are taking the port mappings cos we are now using the ocelot  api gateway.
    environment:
      - DB_HOST=productdb             
      - DB_NAME=dms_product
      - DB_ROOT_PASSWORD=Password1@123

  orderdb:
     container_name: order-db
     image: mongo
     ports:
      - 18005:27017
     networks:
      - backend

  orderwebapi:
    container_name: order-api
    image: ${DOCKER_REGISTRY-}orderwebapi
    build:
      context: .
      dockerfile: OrderWebApi/Dockerfile
   # ports:
     # - 18006:80  #we are taking the port mappings cos we are now using the ocelot  api gateway.
    networks:
      - backend
    environment:
      - DB_HOST=orderdb             
      - DB_NAME=dms_order
      

  apigatewayy:
    container_name: api-gatewayy
    image: ${DOCKER_REGISTRY-}apigatewayy
    build:
      context: .
      dockerfile: ApiGatewayy/Dockerfile
    ports:
      - 8001:80
    networks:
      - backend

